#!/bin/sh

NAME=mlat-client
CONFIGFILE=/etc/default/$NAME
set -e
. /usr/share/debconf/confmodule

# Load config file, if it exists.
if [ -e $CONFIGFILE ]; then
  . $CONFIGFILE || true

  # Store values from config file into
  # debconf db.

  db_set $NAME/run-as-user "$RUN_AS_USER"
  db_set $NAME/server-user "$SERVER_USER"
  db_set $NAME/log-file "$LOGFILE"
  db_set $NAME/input-type "$INPUT_TYPE"
  db_set $NAME/input-host "$INPUT_HOST"
  db_set $NAME/input-port "$INPUT_PORT"
  db_set $NAME/output-host "$OUTPUT_HOST"
  db_set $NAME/output-port "$OUTPUT_PORT"
  db_set $NAME/receiver-lat "$LAT"
  db_set $NAME/receiver-lon "$LON"
  db_set $NAME/receiver-alt "$ALT"
  db_set $NAME/sbs-port "$SBS_PORT"
  db_set $NAME/sbs-ext-port "$SBS_EXT_PORT"
  db_set $NAME/extra-args "$EXTRA_ARGS"
fi

# Ask questions.

db_input_verify() {
  # $1 = priority
  # $2 = db key
  # $3 = verification function, should return 0 if OK
  PRI=$1; KEY=$2; VERIFY=$3

  set +e
  db_input $PRI $KEY; RESULT=$?
  db_go
  set -e
  ASKED=0
  while :
  do
    db_get $KEY
    if $VERIFY "$RET"; then return 0; fi
    if [ $RESULT -ne 0 ]; then
      # db_input failed, and the existing value does not validate
      if [ $RESULT = 30 ] && [ $ASKED = 0 ]
      then
       # question was skipped, but existing value is invalid
       # bump priority and try again (once)
       PRI=high
       ASKED=1
      else
       # give up, use the default value
       db_reset $KEY
       return 0
      fi
    else 
     # db_input was OK, but the value did not verify.
     # show an error message
     db_input high mlat-client/invalid-$VERIFY || true
    fi

    # try again
    set +e
    db_fset $KEY seen false
    db_input high $KEY; RESULT=$?
    db_go
    set -e
  done
}
       
is_unsigned_int() {
  if echo "$1" | grep -Eq '^(0|+?[1-9][0-9]*)$'; then return 0; else return 1; fi
}

is_number() {
  if echo "$1" | grep -Eq '^([+-]?[0-9][0-9]*)(\.[0-9]+)?$'; then return 0; else return 1; fi
}

is_not_empty() {
  if [ -z "$1" ]; then return 1; else return 0; fi
}    

# "adduser: To avoid problems, the username should consist only of
# letters, digits, underscores, full stops, at signs and dashes, and not start with
# a dash (as defined by IEEE Std 1003.1-2001). For compatibility with Samba
# machine accounts $ is also supported at the end of the username"
is_non_root_user() {
  if [ -z "$1" ]; then return 1;
  elif [ "$1" = "root" ]; then return 1;
  elif echo "$1" | grep -Eq '^[a-zA-Z0-9_.@-]+\$?$'; then return 0;
  else return 1; fi
}

is_port_number() {
  if is_unsigned_int "$1"; then
    if [ "$1" -eq 0 ]; then return 0; fi
    if [ "$1" -lt 1024 ]; then return 1; fi
    if [ "$1" -gt 65535 ]; then return 1; fi
    return 0
  else
    return 1
  fi
}

db_input_verify low $NAME/run-as-user is_non_root_user || true
db_input_verify low $NAME/server-user is_non_root_user || true
db_input_verify low $NAME/log-file is_not_empty || true
db_input high $NAME/input-type || true
db_input_verify high $NAME/input-host is_not_empty || true
db_input_verify high $NAME/input-port is_port_number || true
db_input_verify high $NAME/output-port is_port_number || true
db_input_verify high $NAME/receiver-lat is_number || true
db_input_verify high $NAME/receiver-lon is_number || true
db_input_verify high $NAME/receiver-alt is_number || true
db_input_verify medium $NAME/sbs-port is_port_number || true
db_input_verify medium $NAME/sbs-ext-port is_port_number || true
db_input low $NAME/extra-args || true

# Done.
db_stop
